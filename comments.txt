Comments for self-test -------- Tue Mar 28, 2017 at 18:20:55 EDT
No illegal files found
Testing pcc3:
  Attempting to build pcc3 ... ok


LEVEL 80:

Running pcc3 with input T1L80_ok.c ... nonzero termination status
  T1L80_ok.err exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
1,1453c1,220
< Starting parse
< Entering state 0
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 5: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 5: ERROR -- In declarator
< <non-null bucket>line 5: ERROR -- spec def: 13810b0
< line 5: ERROR -- built base
< line 5: ERROR -- got id
< line 5: ERROR -- Print id: a
< line 5: ERROR -- $0 type tag: 6
< line 5: ERROR -- found type. tag: 6
< line 5: ERROR -- not array or ptr. Tag: 6
< line 5: ERROR -- found size
< line 5: ERROR -- found alignment
< line 5: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0
< Entering state 37
< Reducing stack by rule 199 (line 481):
<    $1 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token FLOAT ()
< Shifting token FLOAT ()
< Entering state 14
< Reducing stack by rule 101 (line 266):
<    $1 = token FLOAT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 6: ERROR -- id node: b
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 6: ERROR -- In declarator
< <non-null bucket>line 6: ERROR -- spec def: 1381200
< line 6: ERROR -- built base
< line 6: ERROR -- got id
< line 6: ERROR -- Print id: b
< line 6: ERROR -- $0 type tag: 1
< line 6: ERROR -- found type. tag: 1
< line 6: ERROR -- not array or ptr. Tag: 1
< line 6: ERROR -- found size
< line 6: ERROR -- found alignment
< line 6: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 7: ERROR -- id node: c
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 7: ERROR -- In declarator
< <non-null bucket>line 7: ERROR -- spec def: 1381280
< line 7: ERROR -- built base
< line 7: ERROR -- got id
< line 7: ERROR -- Print id: c
< line 7: ERROR -- $0 type tag: 2
< line 7: ERROR -- found type. tag: 2
< line 7: ERROR -- not array or ptr. Tag: 2
< line 7: ERROR -- found size
< line 7: ERROR -- found alignment
< line 7: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token CHAR ()
< Shifting token CHAR ()
< Entering state 8
< Reducing stack by rule 97 (line 261):
<    $1 = token CHAR ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 8: ERROR -- id node: d
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 8: ERROR -- In declarator
< <non-null bucket>line 8: ERROR -- spec def: 1381300
< line 8: ERROR -- built base
< line 8: ERROR -- got id
< line 8: ERROR -- Print id: d
< line 8: ERROR -- $0 type tag: 11
< line 8: ERROR -- found type. tag: 11
< line 8: ERROR -- not array or ptr. Tag: 11
< line 8: ERROR -- found size
< line 8: ERROR -- found alignment
< line 8: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 12: ERROR -- id node: e
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 12: ERROR -- In declarator
< <non-null bucket>line 12: ERROR -- spec def: 1381380
< line 12: ERROR -- built base
< line 12: ERROR -- got id
< line 12: ERROR -- Print id: e
< line 12: ERROR -- $0 type tag: 2
< line 12: ERROR -- found type. tag: 2
< line 12: ERROR -- not array or ptr. Tag: 2
< line 12: ERROR -- found size
< line 12: ERROR -- found alignment
< line 12: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 12: ERROR -- id node: f
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 12: ERROR -- In declarator
< <non-null bucket>line 12: ERROR -- spec def: 137b102
< line 12: ERROR -- built base
< line 12: ERROR -- got id
< line 12: ERROR -- Print id: f
< line 12: ERROR -- $0 type tag: 1
< line 12: ERROR -- found type. tag: 1
< line 12: ERROR -- not array or ptr. Tag: 1
< line 12: ERROR -- found size
< line 12: ERROR -- found alignment
< line 12: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 12: ERROR -- id node: g
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 12: ERROR -- In declarator
< <non-null bucket>line 12: ERROR -- spec def: 137b104
< line 12: ERROR -- built base
< line 12: ERROR -- got id
< line 12: ERROR -- Print id: g
< line 12: ERROR -- $0 type tag: 1
< line 12: ERROR -- found type. tag: 1
< line 12: ERROR -- not array or ptr. Tag: 1
< line 12: ERROR -- found size
< line 12: ERROR -- found alignment
< line 12: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: i
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 16: ERROR -- In declarator
< <non-null bucket>line 16: ERROR -- spec def: 13814c0
< line 16: ERROR -- built base
< line 16: ERROR -- got id
< line 16: ERROR -- Print id: i
< line 16: ERROR -- $0 type tag: 6
< line 16: ERROR -- found type. tag: 6
< line 16: ERROR -- not array or ptr. Tag: 6
< line 16: ERROR -- found size
< line 16: ERROR -- found alignment
< line 16: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: p1
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70 35
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 16: ERROR -- In declarator
< <non-null bucket>line 16: ERROR -- spec def: 137b11e
< line 16: ERROR -- built base
< line 16: ERROR -- got id
< line 16: ERROR -- Print id: p1
< line 16: ERROR -- $0 type tag: 1
< line 16: ERROR -- storage_ptr = 1
< line 16: ERROR -- found type. tag: 18
< line 16: ERROR -- found size
< line 16: ERROR -- found alignment
< line 16: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70 35 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: p2
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70 35 35
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 16: ERROR -- In declarator
< <non-null bucket>line 16: ERROR -- spec def: 137b122
< line 16: ERROR -- built base
< line 16: ERROR -- got id
< line 16: ERROR -- Print id: p2
< line 16: ERROR -- $0 type tag: 0
< line 16: ERROR -- storage_ptr = 2
< line 16: ERROR -- storage_ptr = 3
< line 16: ERROR -- found type. tag: 18
< line 16: ERROR -- found size
< line 16: ERROR -- found alignment
< line 16: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35 35
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70 35 35 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: p3
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70 35 35 35
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 16: ERROR -- In declarator
< <non-null bucket>line 16: ERROR -- spec def: 137b128
< line 16: ERROR -- built base
< line 16: ERROR -- got id
< line 16: ERROR -- Print id: p3
< line 16: ERROR -- $0 type tag: 0
< line 16: ERROR -- storage_ptr = 4
< line 16: ERROR -- found type. tag: 18
< line 16: ERROR -- found size
< line 16: ERROR -- found alignment
< line 16: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35 35
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 48 70 35 35 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 48 70 35 35 35
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70 35 35 35 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: p4
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70 35 35 35 35
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 16: ERROR -- In declarator
< <non-null bucket>line 16: ERROR -- spec def: 137b12f
< line 16: ERROR -- built base
< line 16: ERROR -- got id
< line 16: ERROR -- Print id: p4
< line 16: ERROR -- $0 type tag: 0
< line 16: ERROR -- storage_ptr = 5
< line 16: ERROR -- found type. tag: 18
< line 16: ERROR -- found size
< line 16: ERROR -- found alignment
< line 16: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26 48 70
< Entering state 148
< Reducing stack by rule 88 (line 214):
<    $1 = nterm init_declarator_list ()
<    $2 = token ',' ()
<    $3 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token FLOAT ()
< Shifting token FLOAT ()
< Entering state 14
< Reducing stack by rule 101 (line 266):
<    $1 = token FLOAT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 18: ERROR -- id node: fp
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 35
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 18: ERROR -- In declarator
< <non-null bucket>line 18: ERROR -- spec def: 13818f0
< line 18: ERROR -- built base
< line 18: ERROR -- got id
< line 18: ERROR -- Print id: fp
< line 18: ERROR -- $0 type tag: 1
< line 18: ERROR -- found type. tag: 18
< line 18: ERROR -- found size
< line 18: ERROR -- found alignment
< line 18: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 22: ERROR -- id node: ia
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 22: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 22: ERROR -- In declarator
< <non-null bucket>line 22: ERROR -- spec def: 1381990
< line 22: ERROR -- built base
< line 22: ERROR -- got id
< line 22: ERROR -- Print id: ia
< line 22: ERROR -- $0 type tag: 6
< line 22: ERROR -- found type. tag: 15
< line 22: ERROR -- found size
< line 22: ERROR -- found alignment
< line 22: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 70
< Reading a token: Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 48 70
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 22: ERROR -- id node: iaa
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 22: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 48 70 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 22: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 48 70
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 48 70
< Entering state 149
< Next token is token ',' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 22: ERROR -- In declarator
< <non-null bucket>line 22: ERROR -- spec def: a
< Segmentation fault (core dumped)
---
> 
> 
>         Dump: Id  = a
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = b
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = c
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = d
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = signed char
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = e
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = f
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = g
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = i
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = p1
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = p2
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = p3
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to <no qual> pointer to <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = p4
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to <no qual> pointer to <no qual> pointer to <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = iaaa
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 10 array of 10 array of 10 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = x1
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 5 <no qual> pointer to signed char
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = x2
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 5 array of 5 <no qual> pointer to <no qual> pointer to signed char
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = x3
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to array of 5 <no qual> pointer to array of 5 signed char
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = da
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 25 double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = iaa
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 10 array of 10 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = fp
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = ia
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 10 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
^^^^^
  T1L80_ok.s exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
0a1,169
>  #    2
>  #    3
>  #    4
>  #    5
> 				# b_global_decl (a, alignment = 4, size = 4)
> .globl a
> 	.data
> 	.align	4
> 	.type	a, @object
> 	.size	a, 4
> a:
> 	.zero	4
>  #    6
> 				# b_global_decl (b, alignment = 4, size = 4)
> .globl b
> 	.align	4
> 	.type	b, @object
> 	.size	b, 4
> b:
> 	.zero	4
>  #    7
> 				# b_global_decl (c, alignment = 8, size = 8)
> .globl c
> 	.align	8
> 	.type	c, @object
> 	.size	c, 8
> c:
> 	.zero	8
>  #    8
> 				# b_global_decl (d, alignment = 1, size = 1)
> .globl d
> 	.align	1
> 	.type	d, @object
> 	.size	d, 1
> d:
> 	.zero	1
>  #    9
>  #   10
>  #   11
>  #   12
> 				# b_global_decl (e, alignment = 8, size = 8)
> .globl e
> 	.align	8
> 	.type	e, @object
> 	.size	e, 8
> e:
> 	.zero	8
> 				# b_global_decl (f, alignment = 8, size = 8)
> .globl f
> 	.align	8
> 	.type	f, @object
> 	.size	f, 8
> f:
> 	.zero	8
> 				# b_global_decl (g, alignment = 8, size = 8)
> .globl g
> 	.align	8
> 	.type	g, @object
> 	.size	g, 8
> g:
> 	.zero	8
>  #   13
>  #   14
>  #   15
>  #   16
> 				# b_global_decl (i, alignment = 4, size = 4)
> .globl i
> 	.align	4
> 	.type	i, @object
> 	.size	i, 4
> i:
> 	.zero	4
> 				# b_global_decl (p1, alignment = 4, size = 4)
> .globl p1
> 	.align	4
> 	.type	p1, @object
> 	.size	p1, 4
> p1:
> 	.zero	4
> 				# b_global_decl (p2, alignment = 4, size = 4)
> .globl p2
> 	.align	4
> 	.type	p2, @object
> 	.size	p2, 4
> p2:
> 	.zero	4
> 				# b_global_decl (p3, alignment = 4, size = 4)
> .globl p3
> 	.align	4
> 	.type	p3, @object
> 	.size	p3, 4
> p3:
> 	.zero	4
> 				# b_global_decl (p4, alignment = 4, size = 4)
> .globl p4
> 	.align	4
> 	.type	p4, @object
> 	.size	p4, 4
> p4:
> 	.zero	4
>  #   17
>  #   18
> 				# b_global_decl (fp, alignment = 4, size = 4)
> .globl fp
> 	.align	4
> 	.type	fp, @object
> 	.size	fp, 4
> fp:
> 	.zero	4
>  #   19
>  #   20
>  #   21
>  #   22
> 				# b_global_decl (ia, alignment = 4, size = 40)
> .globl ia
> 	.align	4
> 	.type	ia, @object
> 	.size	ia, 40
> ia:
> 	.zero	40
> 				# b_global_decl (iaa, alignment = 4, size = 400)
> .globl iaa
> 	.align	4
> 	.type	iaa, @object
> 	.size	iaa, 400
> iaa:
> 	.zero	400
> 				# b_global_decl (iaaa, alignment = 4, size = 4000)
> .globl iaaa
> 	.align	4
> 	.type	iaaa, @object
> 	.size	iaaa, 4000
> iaaa:
> 	.zero	4000
>  #   23
> 				# b_global_decl (da, alignment = 8, size = 200)
> .globl da
> 	.align	8
> 	.type	da, @object
> 	.size	da, 200
> da:
> 	.zero	200
>  #   24
>  #   25
>  #   26
>  #   27
> 				# b_global_decl (x1, alignment = 4, size = 20)
> .globl x1
> 	.align	4
> 	.type	x1, @object
> 	.size	x1, 20
> x1:
> 	.zero	20
> 				# b_global_decl (x2, alignment = 4, size = 100)
> .globl x2
> 	.align	4
> 	.type	x2, @object
> 	.size	x2, 100
> x2:
> 	.zero	100
> 				# b_global_decl (x3, alignment = 4, size = 4)
> .globl x3
> 	.align	4
> 	.type	x3, @object
> 	.size	x3, 4
> x3:
> 	.zero	4
>  #   28
>  #   29
^^^^^
Running pcc3 with input T1L80_err.c ... nonzero termination status
  T1L80_err.err exists
  Comparing with solution file ... Comparing error messages:
-----Yours:-----
Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 4: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 4: ERROR -- In declarator
<non-null bucket>line 4: ERROR -- spec def: 13990b0
line 4: ERROR -- built base
line 4: ERROR -- got id
line 4: ERROR -- Print id: a
line 4: ERROR -- $0 type tag: 6
line 4: ERROR -- found type. tag: 6
line 4: ERROR -- not array or ptr. Tag: 6
line 4: ERROR -- found size
line 4: ERROR -- found alignment
line 4: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 37
Reducing stack by rule 199 (line 481):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 5: ERROR -- id node: b
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 5: ERROR -- In declarator
<non-null bucket>line 5: ERROR -- spec def: 1399200
line 5: ERROR -- built base
line 5: ERROR -- got id
line 5: ERROR -- Print id: b
line 5: ERROR -- $0 type tag: 1
line 5: ERROR -- found type. tag: 1
line 5: ERROR -- not array or ptr. Tag: 1
line 5: ERROR -- found size
line 5: ERROR -- found alignment
line 5: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 6: ERROR -- id node: c
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 6: ERROR -- In declarator
<non-null bucket>line 6: ERROR -- spec def: 1399280
line 6: ERROR -- built base
line 6: ERROR -- got id
line 6: ERROR -- Print id: c
line 6: ERROR -- $0 type tag: 2
line 6: ERROR -- found type. tag: 2
line 6: ERROR -- not array or ptr. Tag: 2
line 6: ERROR -- found size
line 6: ERROR -- found alignment
line 6: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 8
Reducing stack by rule 97 (line 261):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: d
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 7: ERROR -- In declarator
<non-null bucket>line 7: ERROR -- spec def: 1399300
line 7: ERROR -- built base
line 7: ERROR -- got id
line 7: ERROR -- Print id: d
line 7: ERROR -- $0 type tag: 11
line 7: ERROR -- found type. tag: 11
line 7: ERROR -- not array or ptr. Tag: 11
line 7: ERROR -- found size
line 7: ERROR -- found alignment
line 7: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 11: ERROR -- id node: e
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 11: ERROR -- In declarator
<non-null bucket>line 11: ERROR -- spec def: 1399380
line 11: ERROR -- built base
line 11: ERROR -- got id
line 11: ERROR -- Print id: e
line 11: ERROR -- $0 type tag: 2
line 11: ERROR -- found type. tag: 2
line 11: ERROR -- not array or ptr. Tag: 2
line 11: ERROR -- found size
line 11: ERROR -- found alignment
line 11: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 11: ERROR -- id node: f
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 11: ERROR -- In declarator
<non-null bucket>line 11: ERROR -- spec def: 13930da
line 11: ERROR -- built base
line 11: ERROR -- got id
line 11: ERROR -- Print id: f
line 11: ERROR -- $0 type tag: 1
line 11: ERROR -- found type. tag: 1
line 11: ERROR -- not array or ptr. Tag: 1
line 11: ERROR -- found size
line 11: ERROR -- found alignment
line 11: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 11: ERROR -- id node: g
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 11: ERROR -- In declarator
<non-null bucket>line 11: ERROR -- spec def: 13930dc
line 11: ERROR -- built base
line 11: ERROR -- got id
line 11: ERROR -- Print id: g
line 11: ERROR -- $0 type tag: 1
line 11: ERROR -- found type. tag: 1
line 11: ERROR -- not array or ptr. Tag: 1
line 11: ERROR -- found size
line 11: ERROR -- found alignment
line 11: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: i
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 15: ERROR -- In declarator
<non-null bucket>line 15: ERROR -- spec def: 13994c0
line 15: ERROR -- built base
line 15: ERROR -- got id
line 15: ERROR -- Print id: i
line 15: ERROR -- $0 type tag: 6
line 15: ERROR -- found type. tag: 6
line 15: ERROR -- not array or ptr. Tag: 6
line 15: ERROR -- found size
line 15: ERROR -- found alignment
line 15: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: p1
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70 35
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 15: ERROR -- In declarator
<non-null bucket>line 15: ERROR -- spec def: 13930f6
line 15: ERROR -- built base
line 15: ERROR -- got id
line 15: ERROR -- Print id: p1
line 15: ERROR -- $0 type tag: 1
line 15: ERROR -- storage_ptr = 1
line 15: ERROR -- found type. tag: 18
line 15: ERROR -- found size
line 15: ERROR -- found alignment
line 15: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70 35 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: p2
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70 35 35
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 15: ERROR -- In declarator
<non-null bucket>line 15: ERROR -- spec def: 13930fa
line 15: ERROR -- built base
line 15: ERROR -- got id
line 15: ERROR -- Print id: p2
line 15: ERROR -- $0 type tag: 0
line 15: ERROR -- storage_ptr = 2
line 15: ERROR -- storage_ptr = 3
line 15: ERROR -- found type. tag: 18
line 15: ERROR -- found size
line 15: ERROR -- found alignment
line 15: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35 35
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70 35 35 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: p3
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70 35 35 35
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 15: ERROR -- In declarator
<non-null bucket>line 15: ERROR -- spec def: 1393100
line 15: ERROR -- built base
line 15: ERROR -- got id
line 15: ERROR -- Print id: p3
line 15: ERROR -- $0 type tag: 0
line 15: ERROR -- storage_ptr = 4
line 15: ERROR -- found type. tag: 18
line 15: ERROR -- found size
line 15: ERROR -- found alignment
line 15: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35 35
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 48 70 35 35 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 48 70 35 35 35
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70 35 35 35 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: p4
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70 35 35 35 35
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 15: ERROR -- In declarator
<non-null bucket>line 15: ERROR -- spec def: 1393107
line 15: ERROR -- built base
line 15: ERROR -- got id
line 15: ERROR -- Print id: p4
line 15: ERROR -- $0 type tag: 0
line 15: ERROR -- storage_ptr = 5
line 15: ERROR -- found type. tag: 18
line 15: ERROR -- found size
line 15: ERROR -- found alignment
line 15: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26 48 70
Entering state 148
Reducing stack by rule 88 (line 214):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '*' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 17: ERROR -- id node: fp
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 35
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 17: ERROR -- In declarator
<non-null bucket>line 17: ERROR -- spec def: 13998f0
line 17: ERROR -- built base
line 17: ERROR -- got id
line 17: ERROR -- Print id: fp
line 17: ERROR -- $0 type tag: 1
line 17: ERROR -- found type. tag: 18
line 17: ERROR -- found size
line 17: ERROR -- found alignment
line 17: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 21: ERROR -- id node: ia
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 21: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 21: ERROR -- In declarator
<non-null bucket>line 21: ERROR -- spec def: 1399990
line 21: ERROR -- built base
line 21: ERROR -- got id
line 21: ERROR -- Print id: ia
line 21: ERROR -- $0 type tag: 6
line 21: ERROR -- found type. tag: 15
line 21: ERROR -- found size
line 21: ERROR -- found alignment
line 21: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ',' ()
Shifting token ',' ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 48 70
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 21: ERROR -- id node: iaa
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 21: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 48 70 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 21: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 48 70
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 48 70
Entering state 149
Next token is token ',' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 21: ERROR -- In declarator
<non-null bucket>line 21: ERROR -- spec def: a
Segmentation fault (core dumped)
-----Mine:------
line 30: ERROR -- no declarator in declaration
line 31: ERROR -- duplicate declaration for a
line 31: ERROR -- duplicate definition of `a'
line 32: ERROR -- illegal array dimension
================


LEVEL 90:

Running pcc3 with input T1L90_ok.c ... zero termination status
  T1L90_ok.err exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
1,1026d0
< Starting parse
< Entering state 0
< Reading a token: Next token is token SIGNED ()
< Shifting token SIGNED ()
< Entering state 12
< Reducing stack by rule 103 (line 268):
<    $1 = token SIGNED ()
< -> $$ = nterm type_specifier ()
< Stack now 0
< Entering state 28
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 28
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 28
< Entering state 52
< Reducing stack by rule 84 (line 207):
<    $1 = nterm type_specifier ()
<    $2 = nterm declaration_specifiers ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 5: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 5: ERROR -- In declarator
< <non-null bucket>line 5: ERROR -- spec def: b1e0b0
< line 5: ERROR -- built base
< line 5: ERROR -- got id
< line 5: ERROR -- Print id: a
< line 5: ERROR -- $0 type tag: 6
< line 5: ERROR -- found type. tag: 6
< line 5: ERROR -- not array or ptr. Tag: 6
< line 5: ERROR -- found size
< line 5: ERROR -- found alignment
< line 5: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0
< Entering state 37
< Reducing stack by rule 199 (line 481):
<    $1 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token UNSIGNED ()
< Shifting token UNSIGNED ()
< Entering state 13
< Reducing stack by rule 104 (line 269):
<    $1 = token UNSIGNED ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 28
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 28
< Entering state 52
< Reducing stack by rule 84 (line 207):
<    $1 = nterm type_specifier ()
<    $2 = nterm declaration_specifiers ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 6: ERROR -- id node: b
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 6: ERROR -- In declarator
< <non-null bucket>line 6: ERROR -- spec def: b1e200
< line 6: ERROR -- built base
< line 6: ERROR -- got id
< line 6: ERROR -- Print id: b
< line 6: ERROR -- $0 type tag: 9
< line 6: ERROR -- found type. tag: 9
< line 6: ERROR -- not array or ptr. Tag: 9
< line 6: ERROR -- found size
< line 6: ERROR -- found alignment
< line 6: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token LONG ()
< Shifting token LONG ()
< Entering state 11
< Reducing stack by rule 100 (line 264):
<    $1 = token LONG ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token UNSIGNED ()
< Shifting token UNSIGNED ()
< Entering state 13
< Reducing stack by rule 104 (line 269):
<    $1 = token UNSIGNED ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 28
< Entering state 28
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 28 28
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 28 28
< Entering state 52
< Reducing stack by rule 84 (line 207):
<    $1 = nterm type_specifier ()
<    $2 = nterm declaration_specifiers ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 28
< Entering state 52
< Reducing stack by rule 84 (line 207):
<    $1 = nterm type_specifier ()
<    $2 = nterm declaration_specifiers ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 7: ERROR -- id node: c
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 7: ERROR -- In declarator
< <non-null bucket>line 7: ERROR -- spec def: b1e280
< line 7: ERROR -- built base
< line 7: ERROR -- got id
< line 7: ERROR -- Print id: c
< line 7: ERROR -- $0 type tag: 7
< line 7: ERROR -- found type. tag: 7
< line 7: ERROR -- not array or ptr. Tag: 7
< line 7: ERROR -- found size
< line 7: ERROR -- found alignment
< line 7: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token SHORT ()
< Shifting token SHORT ()
< Entering state 9
< Reducing stack by rule 98 (line 262):
<    $1 = token SHORT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 8: ERROR -- id node: d
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 8: ERROR -- In declarator
< <non-null bucket>line 8: ERROR -- spec def: b1e300
< line 8: ERROR -- built base
< line 8: ERROR -- got id
< line 8: ERROR -- Print id: d
< line 8: ERROR -- $0 type tag: 5
< line 8: ERROR -- found type. tag: 5
< line 8: ERROR -- not array or ptr. Tag: 5
< line 8: ERROR -- found size
< line 8: ERROR -- found alignment
< line 8: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 12: ERROR -- id node: h
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 12: ERROR -- In declarator
< <non-null bucket>line 12: ERROR -- spec def: b1e380
< line 12: ERROR -- built base
< line 12: ERROR -- got id
< line 12: ERROR -- Print id: h
< line 12: ERROR -- $0 type tag: 6
< line 12: ERROR -- found type. tag: 6
< line 12: ERROR -- not array or ptr. Tag: 6
< line 12: ERROR -- found size
< line 12: ERROR -- found alignment
< line 12: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 13: ERROR -- id node: i
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 13: ERROR -- In declarator
< <non-null bucket>line 13: ERROR -- spec def: b1e400
< line 13: ERROR -- built base
< line 13: ERROR -- got id
< line 13: ERROR -- Print id: i
< line 13: ERROR -- $0 type tag: 2
< line 13: ERROR -- found type. tag: 2
< line 13: ERROR -- not array or ptr. Tag: 2
< line 13: ERROR -- found size
< line 13: ERROR -- found alignment
< line 13: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 17: ERROR -- id node: j
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 35
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 35
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 17: ERROR -- In declarator
< <non-null bucket>line 17: ERROR -- spec def: b1e480
< line 17: ERROR -- built base
< line 17: ERROR -- got id
< line 17: ERROR -- Print id: j
< line 17: ERROR -- $0 type tag: 6
< line 17: ERROR -- storage_ptr = 1
< line 17: ERROR -- found type. tag: 18
< line 17: ERROR -- found size
< line 17: ERROR -- found alignment
< line 17: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '(' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '(' ()
< Shifting token '(' ()
< Entering state 22
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 22 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 22
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 22 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 18: ERROR -- id node: k
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 22 35
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 22 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 22
< Entering state 42
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 67
< Reducing stack by rule 137 (line 347):
<    $1 = token '(' ()
<    $2 = nterm declarator ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 18: ERROR -- In declarator
< <non-null bucket>line 18: ERROR -- spec def: b1e550
< line 18: ERROR -- built base
< line 18: ERROR -- got id
< line 18: ERROR -- Print id: k
< line 18: ERROR -- $0 type tag: 6
< line 18: ERROR -- found type. tag: 18
< line 18: ERROR -- found size
< line 18: ERROR -- found alignment
< line 18: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '(' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '(' ()
< Shifting token '(' ()
< Entering state 22
< Reading a token: Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 22 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 22
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 22 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 19: ERROR -- id node: l
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 22 35
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 22 35 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 19: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 22 35
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 22 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 22
< Entering state 42
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 67
< Reducing stack by rule 137 (line 347):
<    $1 = token '(' ()
<    $2 = nterm declarator ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 19: ERROR -- In declarator
< <non-null bucket>line 19: ERROR -- spec def: b1e5f0
< line 19: ERROR -- built base
< line 19: ERROR -- got id
< line 19: ERROR -- Print id: l
< line 19: ERROR -- $0 type tag: 6
< line 19: ERROR -- found type. tag: 15
< line 19: ERROR -- found size
< line 19: ERROR -- found alignment
< line 19: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Now at end of input.
< Shifting token $end ()
< Entering state 61
< Stack now 0 36 61
< Cleanup: popping token $end ()
< Cleanup: popping nterm translation_unit ()
1035c9
< 		storage class = static
---
> 		storage class = <no storage class>
1046c20
< 		storage class = static
---
> 		storage class = <no storage class>
1057c31
< 		storage class = static
---
> 		storage class = <no storage class>
1068c42
< 		storage class = static
---
> 		storage class = <no storage class>
1078,1079c52,55
< 		type = signed int
< 		storage class = static
---
> 		type = function prototype
> 	<parameter list is null>
> 		returning signed int
> 		storage class = <no storage class>
1089,1090c65,68
< 		type = double
< 		storage class = static
---
> 		type = function prototype
> 	<parameter list is null>
> 		returning double
> 		storage class = <no storage class>
1100,1101c78,81
< 		type = <no qual> pointer to signed int
< 		storage class = static
---
> 		type = function prototype
> 	<parameter list is null>
> 		returning <no qual> pointer to signed int
> 		storage class = <no storage class>
1111,1112c91,94
< 		type = <no qual> pointer to signed int
< 		storage class = static
---
> 		type = <no qual> pointer to function prototype
> 	<parameter list is null>
> 		returning signed int
> 		storage class = <no storage class>
1122,1123c104,107
< 		type = array of 10 <no qual> pointer to signed int
< 		storage class = static
---
> 		type = array of 10 <no qual> pointer to function prototype
> 	<parameter list is null>
> 		returning signed int
> 		storage class = <no storage class>
^^^^^
  T1L90_ok.s exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
41,47d40
< 				# b_global_decl (h, alignment = 4, size = 4)
< .globl h
< 	.align	4
< 	.type	h, @object
< 	.size	h, 4
< h:
< 	.zero	4
49,55d41
< 				# b_global_decl (i, alignment = 8, size = 8)
< .globl i
< 	.align	8
< 	.type	i, @object
< 	.size	i, 8
< i:
< 	.zero	8
60,66d45
< 				# b_global_decl (j, alignment = 4, size = 4)
< .globl j
< 	.align	4
< 	.type	j, @object
< 	.size	j, 4
< j:
< 	.zero	4
^^^^^
Running pcc3 with input T1L90_err.c ... zero termination status
  T1L90_err.err exists
  Comparing with solution file ... Comparing error messages:
-----Yours:-----
Starting parse
Entering state 0
Reading a token: Next token is token SIGNED ()
Shifting token SIGNED ()
Entering state 12
Reducing stack by rule 103 (line 268):
   $1 = token SIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 28
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 4: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 4: ERROR -- In declarator
<non-null bucket>line 4: ERROR -- spec def: 1c880b0
line 4: ERROR -- built base
line 4: ERROR -- got id
line 4: ERROR -- Print id: a
line 4: ERROR -- $0 type tag: 6
line 4: ERROR -- found type. tag: 6
line 4: ERROR -- not array or ptr. Tag: 6
line 4: ERROR -- found size
line 4: ERROR -- found alignment
line 4: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 37
Reducing stack by rule 199 (line 481):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token UNSIGNED ()
Shifting token UNSIGNED ()
Entering state 13
Reducing stack by rule 104 (line 269):
   $1 = token UNSIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 5: ERROR -- id node: b
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 5: ERROR -- In declarator
<non-null bucket>line 5: ERROR -- spec def: 1c88200
line 5: ERROR -- built base
line 5: ERROR -- got id
line 5: ERROR -- Print id: b
line 5: ERROR -- $0 type tag: 9
line 5: ERROR -- found type. tag: 9
line 5: ERROR -- not array or ptr. Tag: 9
line 5: ERROR -- found size
line 5: ERROR -- found alignment
line 5: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token LONG ()
Shifting token LONG ()
Entering state 11
Reducing stack by rule 100 (line 264):
   $1 = token LONG ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token UNSIGNED ()
Shifting token UNSIGNED ()
Entering state 13
Reducing stack by rule 104 (line 269):
   $1 = token UNSIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28
Entering state 28
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 6: ERROR -- id node: c
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 6: ERROR -- In declarator
<non-null bucket>line 6: ERROR -- spec def: 1c88280
line 6: ERROR -- built base
line 6: ERROR -- got id
line 6: ERROR -- Print id: c
line 6: ERROR -- $0 type tag: 7
line 6: ERROR -- found type. tag: 7
line 6: ERROR -- not array or ptr. Tag: 7
line 6: ERROR -- found size
line 6: ERROR -- found alignment
line 6: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 9
Reducing stack by rule 98 (line 262):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: d
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 7: ERROR -- In declarator
<non-null bucket>line 7: ERROR -- spec def: 1c88300
line 7: ERROR -- built base
line 7: ERROR -- got id
line 7: ERROR -- Print id: d
line 7: ERROR -- $0 type tag: 5
line 7: ERROR -- found type. tag: 5
line 7: ERROR -- not array or ptr. Tag: 5
line 7: ERROR -- found size
line 7: ERROR -- found alignment
line 7: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 9
Reducing stack by rule 98 (line 262):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 9
Reducing stack by rule 98 (line 262):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
line 11: ERROR -- illegal size specifier
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 11: ERROR -- id node: e
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 11: ERROR -- In declarator
<non-null bucket>line 11: ERROR -- spec def: 1c88380
line 11: ERROR -- built base
line 11: ERROR -- got id
line 11: ERROR -- Print id: e
line 11: ERROR -- $0 type tag: 5
line 11: ERROR -- found type. tag: 5
line 11: ERROR -- not array or ptr. Tag: 5
line 11: ERROR -- found size
line 11: ERROR -- found alignment
line 11: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 9
Reducing stack by rule 98 (line 262):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
line 12: ERROR -- illegal size specifier
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 12: ERROR -- id node: f
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 12: ERROR -- In declarator
<non-null bucket>line 12: ERROR -- spec def: 1c88400
line 12: ERROR -- built base
line 12: ERROR -- got id
line 12: ERROR -- Print id: f
line 12: ERROR -- $0 type tag: 1
line 12: ERROR -- found type. tag: 1
line 12: ERROR -- not array or ptr. Tag: 1
line 12: ERROR -- found size
line 12: ERROR -- found alignment
line 12: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token SIGNED ()
Shifting token SIGNED ()
Entering state 12
Reducing stack by rule 103 (line 268):
   $1 = token SIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
line 13: ERROR -- illegal sign specifier
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 13: ERROR -- id node: g
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 13: ERROR -- In declarator
<non-null bucket>line 13: ERROR -- spec def: 1c88480
line 13: ERROR -- built base
line 13: ERROR -- got id
line 13: ERROR -- Print id: g
line 13: ERROR -- $0 type tag: 2
line 13: ERROR -- found type. tag: 2
line 13: ERROR -- not array or ptr. Tag: 2
line 13: ERROR -- found size
line 13: ERROR -- found alignment
line 13: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 17: ERROR -- id node: h
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 17: ERROR -- In declarator
<non-null bucket>line 17: ERROR -- spec def: 1c88500
line 17: ERROR -- built base
line 17: ERROR -- got id
line 17: ERROR -- Print id: h
line 17: ERROR -- $0 type tag: 6
line 17: ERROR -- found type. tag: 6
line 17: ERROR -- not array or ptr. Tag: 6
line 17: ERROR -- found size
line 17: ERROR -- found alignment
line 17: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 18: ERROR -- id node: i
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 18: ERROR -- In declarator
<non-null bucket>line 18: ERROR -- spec def: 1c88580
line 18: ERROR -- built base
line 18: ERROR -- got id
line 18: ERROR -- Print id: i
line 18: ERROR -- $0 type tag: 2
line 18: ERROR -- found type. tag: 2
line 18: ERROR -- not array or ptr. Tag: 2
line 18: ERROR -- found size
line 18: ERROR -- found alignment
line 18: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '*' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 22: ERROR -- id node: j
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 35
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 35
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 22: ERROR -- In declarator
<non-null bucket>line 22: ERROR -- spec def: 1c88600
line 22: ERROR -- built base
line 22: ERROR -- got id
line 22: ERROR -- Print id: j
line 22: ERROR -- $0 type tag: 6
line 22: ERROR -- storage_ptr = 1
line 22: ERROR -- found type. tag: 18
line 22: ERROR -- found size
line 22: ERROR -- found alignment
line 22: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '(' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '(' ()
Shifting token '(' ()
Entering state 22
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 22 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 22
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 22 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 23: ERROR -- id node: k
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 22 35
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 22 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 22
Entering state 42
Next token is token ')' ()
Shifting token ')' ()
Entering state 67
Reducing stack by rule 137 (line 347):
   $1 = token '(' ()
   $2 = nterm declarator ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 23: ERROR -- In declarator
<non-null bucket>line 23: ERROR -- spec def: 1c886d0
line 23: ERROR -- built base
line 23: ERROR -- got id
line 23: ERROR -- Print id: k
line 23: ERROR -- $0 type tag: 6
line 23: ERROR -- found type. tag: 18
line 23: ERROR -- found size
line 23: ERROR -- found alignment
line 23: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '(' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '(' ()
Shifting token '(' ()
Entering state 22
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 22 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 22
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 22 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 24: ERROR -- id node: l
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 22 35
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 22 35 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 24: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 22 35
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 22 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 22
Entering state 42
Next token is token ')' ()
Shifting token ')' ()
Entering state 67
Reducing stack by rule 137 (line 347):
   $1 = token '(' ()
   $2 = nterm declarator ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 24: ERROR -- In declarator
<non-null bucket>line 24: ERROR -- spec def: 1c88770
line 24: ERROR -- built base
line 24: ERROR -- got id
line 24: ERROR -- Print id: l
line 24: ERROR -- $0 type tag: 6
line 24: ERROR -- found type. tag: 15
line 24: ERROR -- found size
line 24: ERROR -- found alignment
line 24: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 28: ERROR -- id node: m
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 28: ERROR -- In declarator
<non-null bucket>line 28: ERROR -- spec def: 1c88860
line 28: ERROR -- built base
line 28: ERROR -- got id
line 28: ERROR -- Print id: m
line 28: ERROR -- $0 type tag: 6
line 28: ERROR -- found type. tag: 6
line 28: ERROR -- not array or ptr. Tag: 6
line 28: ERROR -- found size
line 28: ERROR -- found alignment
line 28: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 29: ERROR -- id node: n
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 29: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 29: ERROR -- In declarator
<non-null bucket>line 29: ERROR -- spec def: 1c888e0
line 29: ERROR -- built base
line 29: ERROR -- got id
line 29: ERROR -- Print id: n
line 29: ERROR -- $0 type tag: 1
line 29: ERROR -- found type. tag: 15
line 29: ERROR -- found size
line 29: ERROR -- found alignment
line 29: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 30: ERROR -- id node: o
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 30: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 30: ERROR -- In declarator
<non-null bucket>line 30: ERROR -- spec def: 1c889b0
line 30: ERROR -- built base
line 30: ERROR -- got id
line 30: ERROR -- Print id: o
line 30: ERROR -- $0 type tag: 2
line 30: ERROR -- found type. tag: 15
line 30: ERROR -- found size
line 30: ERROR -- found alignment
line 30: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 61
Stack now 0 36 61
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()
-----Mine:------
line 11: ERROR -- illegal size specifier
line 12: ERROR -- illegal size specifier
line 13: ERROR -- illegal sign specifier
line 28: ERROR -- cannot have function returning function
line 29: ERROR -- cannot have function returning array
line 30: ERROR -- cannot have array of functions
================


LEVEL 100:

Running pcc3 with input T1L100_ok.c ... nonzero termination status
  T1L100_ok.err exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
1,915c1,230
< Starting parse
< Entering state 0
< Reading a token: Next token is token VOID ()
< Shifting token VOID ()
< Entering state 18
< Reducing stack by rule 96 (line 260):
<    $1 = token VOID ()
< -> $$ = nterm type_specifier ()
< Stack now 0
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 3: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 3: ERROR -- In declarator
< <non-null bucket>line 3: ERROR -- spec def: 23ec0b0
< line 3: ERROR -- built base
< line 3: ERROR -- got id
< line 3: ERROR -- Print id: a
< line 3: ERROR -- $0 type tag: 6
< line 3: ERROR -- found type. tag: 6
< line 3: ERROR -- not array or ptr. Tag: 6
< line 3: ERROR -- found size
< line 3: ERROR -- found alignment
< line 3: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0
< Entering state 37
< Reducing stack by rule 199 (line 481):
<    $1 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 4: ERROR -- id node: b
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 4: ERROR -- In declarator
< <non-null bucket>line 4: ERROR -- spec def: 23ec200
< line 4: ERROR -- built base
< line 4: ERROR -- got id
< line 4: ERROR -- Print id: b
< line 4: ERROR -- $0 type tag: 6
< line 4: ERROR -- found type. tag: 6
< line 4: ERROR -- not array or ptr. Tag: 6
< line 4: ERROR -- found size
< line 4: ERROR -- found alignment
< line 4: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 5: ERROR -- id node: c
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token ')' ()
< Shifting token ')' ()
< Entering state 134
< Reducing stack by rule 141 (line 355):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 5: ERROR -- In declarator
< <non-null bucket>line 5: ERROR -- spec def: 23ec280
< line 5: ERROR -- built base
< line 5: ERROR -- got id
< line 5: ERROR -- Print id: c
< line 5: ERROR -- $0 type tag: 2
< line 5: ERROR -- found type. tag: 2
< line 5: ERROR -- not array or ptr. Tag: 2
< line 5: ERROR -- found size
< line 5: ERROR -- found alignment
< line 5: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 6: ERROR -- id node: d
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58
< Entering state 135
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 34 58 135
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 6: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 227
< Reducing stack by rule 148 (line 374):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm declarator ()
< -> $$ = nterm parameter_declaration ()
< Stack now 0 36 26 34 58
< Entering state 138
< Reducing stack by rule 146 (line 369):
<    $1 = nterm parameter_declaration ()
< -> $$ = nterm parameter_list ()
< Stack now 0 36 26 34 58
< Entering state 137
< Next token is token ')' ()
< Reducing stack by rule 144 (line 364):
<    $1 = nterm parameter_list ()
< -> $$ = nterm parameter_type_list ()
< Stack now 0 36 26 34 58
< Entering state 136
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 231
< Reducing stack by rule 140 (line 354):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = nterm parameter_type_list ()
<    $4 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 6: ERROR -- In declarator
< <non-null bucket>line 6: ERROR -- spec def: 23ec300
< line 6: ERROR -- built base
< line 6: ERROR -- got id
< line 6: ERROR -- Print id: d
< line 6: ERROR -- $0 type tag: 6
< line 6: ERROR -- found type. tag: 6
< line 6: ERROR -- not array or ptr. Tag: 6
< line 6: ERROR -- found size
< line 6: ERROR -- found alignment
< line 6: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token FLOAT ()
< Shifting token FLOAT ()
< Entering state 14
< Reducing stack by rule 101 (line 266):
<    $1 = token FLOAT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 7: ERROR -- id node: e
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token UNSIGNED ()
< Shifting token UNSIGNED ()
< Entering state 13
< Reducing stack by rule 104 (line 269):
<    $1 = token UNSIGNED ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58
< Entering state 28
< Reading a token: Next token is token CHAR ()
< Shifting token CHAR ()
< Entering state 8
< Reducing stack by rule 97 (line 261):
<    $1 = token CHAR ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58 28
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58 28
< Entering state 52
< Reducing stack by rule 84 (line 207):
<    $1 = nterm type_specifier ()
<    $2 = nterm declaration_specifiers ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58
< Entering state 135
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 34 58 135
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 7: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 227
< Reducing stack by rule 148 (line 374):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm declarator ()
< -> $$ = nterm parameter_declaration ()
< Stack now 0 36 26 34 58
< Entering state 138
< Reducing stack by rule 146 (line 369):
<    $1 = nterm parameter_declaration ()
< -> $$ = nterm parameter_list ()
< Stack now 0 36 26 34 58
< Entering state 137
< Next token is token ')' ()
< Reducing stack by rule 144 (line 364):
<    $1 = nterm parameter_list ()
< -> $$ = nterm parameter_type_list ()
< Stack now 0 36 26 34 58
< Entering state 136
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 231
< Reducing stack by rule 140 (line 354):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = nterm parameter_type_list ()
<    $4 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 7: ERROR -- In declarator
< <non-null bucket>line 7: ERROR -- spec def: 23ec3c0
< line 7: ERROR -- built base
< line 7: ERROR -- got id
< line 7: ERROR -- Print id: e
< line 7: ERROR -- $0 type tag: 1
< line 7: ERROR -- found type. tag: 1
< line 7: ERROR -- not array or ptr. Tag: 1
< line 7: ERROR -- found size
< line 7: ERROR -- found alignment
< line 7: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token SHORT ()
< Shifting token SHORT ()
< Entering state 9
< Reducing stack by rule 98 (line 262):
<    $1 = token SHORT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 8: ERROR -- id node: f
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58
< Entering state 135
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 34 58 135
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 8: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 227
< Reducing stack by rule 148 (line 374):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm declarator ()
< -> $$ = nterm parameter_declaration ()
< Stack now 0 36 26 34 58
< Entering state 138
< Reducing stack by rule 146 (line 369):
<    $1 = nterm parameter_declaration ()
< -> $$ = nterm parameter_list ()
< Stack now 0 36 26 34 58
< Entering state 137
< Next token is token ')' ()
< Reducing stack by rule 144 (line 364):
<    $1 = nterm parameter_list ()
< -> $$ = nterm parameter_type_list ()
< Stack now 0 36 26 34 58
< Entering state 136
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 231
< Reducing stack by rule 140 (line 354):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = nterm parameter_type_list ()
<    $4 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 8: ERROR -- In declarator
< <non-null bucket>line 8: ERROR -- spec def: 23ec480
< line 8: ERROR -- built base
< line 8: ERROR -- got id
< line 8: ERROR -- Print id: f
< line 8: ERROR -- $0 type tag: 5
< line 8: ERROR -- found type. tag: 5
< line 8: ERROR -- not array or ptr. Tag: 5
< line 8: ERROR -- found size
< line 8: ERROR -- found alignment
< line 8: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 9: ERROR -- id node: g
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '(' ()
< Shifting token '(' ()
< Entering state 58
< Reading a token: Next token is token LONG ()
< Shifting token LONG ()
< Entering state 11
< Reducing stack by rule 100 (line 264):
<    $1 = token LONG ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58
< Entering state 135
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 34 58 135
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 9: ERROR -- id node: a
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 34
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 34 58 135
< Entering state 227
< Reducing stack by rule 148 (line 374):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm declarator ()
< -> $$ = nterm parameter_declaration ()
< Stack now 0 36 26 34 58
< Entering state 138
< Reducing stack by rule 146 (line 369):
<    $1 = nterm parameter_declaration ()
< -> $$ = nterm parameter_list ()
< Stack now 0 36 26 34 58
< Entering state 137
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 232
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36 26 34 58 137 232
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36 26 34 58 137 232
< Entering state 135
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 34 58 137 232 135
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 9: ERROR -- id node: b
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 34 58 137 232 135
< Entering state 34
< Reading a token: Next token is token ')' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 34 58 137 232 135
< Entering state 227
< Reducing stack by rule 148 (line 374):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm declarator ()
< -> $$ = nterm parameter_declaration ()
< Stack now 0 36 26 34 58 137 232
< Entering state 297
< Reducing stack by rule 147 (line 370):
<    $1 = nterm parameter_list ()
<    $2 = token ',' ()
<    $3 = nterm parameter_declaration ()
< -> $$ = nterm parameter_list ()
< Stack now 0 36 26 34 58
< Entering state 137
< Next token is token ')' ()
< Reducing stack by rule 144 (line 364):
<    $1 = nterm parameter_list ()
< -> $$ = nterm parameter_type_list ()
< Stack now 0 36 26 34 58
< Entering state 136
< Next token is token ')' ()
< Shifting token ')' ()
< Entering state 231
< Reducing stack by rule 140 (line 354):
<    $1 = nterm direct_declarator ()
<    $2 = token '(' ()
<    $3 = nterm parameter_type_list ()
<    $4 = token ')' ()
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token ';' ()
< Reducing stack by rule 89 (line 218):
<    $1 = nterm declarator ()
< line 9: ERROR -- In declarator
< <non-null bucket>line 9: ERROR -- spec def: 23ec540
< line 9: ERROR -- built base
< line 9: ERROR -- got id
< line 9: ERROR -- Print id: g
< line 9: ERROR -- $0 type tag: 2
< line 9: ERROR -- found type. tag: 2
< line 9: ERROR -- not array or ptr. Tag: 2
< line 9: ERROR -- found size
< line 9: ERROR -- found alignment
< line 9: ERROR -- backend calls
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token VOID ()
< Shifting token VOID ()
< Entering state 18
< Reducing stack by rule 96 (line 260):
<    $1 = token VOID ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< BUG: line 10: illegal specifier in update_bucket
---
> 
> 
>         Dump: Id  = a
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype
> 	<parameter list is null>
> 		returning void
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = b
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype
> 	<parameter list is null>
> 		returning signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = c
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype
> 	<parameter list is null>
> 		returning double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = d
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type signed int
> 		)		returning signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = e
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type unsigned char
> 		)		returning float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = f
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type double
> 		)		returning signed short int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = g
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type signed long int
> 	param: id b; type double
> 		)		returning double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = h
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type signed int
> 	param: id b; type unsigned int
> 	param: id c; type double
> 		)		returning void
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = i
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type <no qual> pointer to signed int
> 		)		returning void
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = j
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type array of 5 signed int
> 		)		returning float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = k
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id f; type <no qual> pointer to function prototype
> 	<parameter list is null>
> 		returning signed char
> 		)		returning signed long int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = l
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type <no qual> pointer to <no qual> pointer to unsigned char
> 	param: id b; type array of 5 signed long int
> 	param: id c; type function prototype
> 	<parameter list is null>
> 		returning <no qual> pointer to double
> 		)		returning unsigned short int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = m
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type reference to signed int
> 		)		returning void
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = n
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id x; type reference to <no qual> pointer to signed int
> 		)		returning signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = o
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type reference to double
> 	param: id b; type reference to double
> 	param: id c; type signed int
> 		)		returning signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = p
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = function prototype (
> 	param: id a; type signed int
> 	param: id b; type reference to signed int
> 	param: id c; type reference to array of 4 signed int
> 	param: id d; type reference to function prototype
> 	<parameter list is null>
> 		returning double
> 	param: id e; type reference to function prototype
> 	<parameter list is null>
> 		returning <no qual> pointer to signed char
> 		)		returning void
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
> 
>         Dump: Id  = x
^^^^^
  T1L100_ok.s exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
3,10d2
< 				# b_global_decl (a, alignment = 4, size = 4)
< .globl a
< 	.data
< 	.align	4
< 	.type	a, @object
< 	.size	a, 4
< a:
< 	.zero	4
12,18d3
< 				# b_global_decl (b, alignment = 4, size = 4)
< .globl b
< 	.align	4
< 	.type	b, @object
< 	.size	b, 4
< b:
< 	.zero	4
20,26d4
< 				# b_global_decl (c, alignment = 8, size = 8)
< .globl c
< 	.align	8
< 	.type	c, @object
< 	.size	c, 8
< c:
< 	.zero	8
28,34d5
< 				# b_global_decl (d, alignment = 4, size = 4)
< .globl d
< 	.align	4
< 	.type	d, @object
< 	.size	d, 4
< d:
< 	.zero	4
36,42d6
< 				# b_global_decl (e, alignment = 4, size = 4)
< .globl e
< 	.align	4
< 	.type	e, @object
< 	.size	e, 4
< e:
< 	.zero	4
44,50d7
< 				# b_global_decl (f, alignment = 2, size = 2)
< .globl f
< 	.align	2
< 	.type	f, @object
< 	.size	f, 2
< f:
< 	.zero	2
52,58d8
< 				# b_global_decl (g, alignment = 8, size = 8)
< .globl g
< 	.align	8
< 	.type	g, @object
< 	.size	g, 8
< g:
< 	.zero	8
59a10,23
>  #   11
>  #   12
>  #   13
>  #   14
>  #   15
>  #   16
>  #   17
>  #   18
>  #   19
>  #   20
>  #   21
>  #   22
>  #   23
>  #   24
^^^^^
Running pcc3 with input T1L100_err.c ... nonzero termination status
  T1L100_err.err exists
  Comparing with solution file ... Comparing error messages:
-----Yours:-----
Starting parse
Entering state 0
Reading a token: Next token is token VOID ()
Shifting token VOID ()
Entering state 18
Reducing stack by rule 96 (line 260):
   $1 = token VOID ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 1: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 1: ERROR -- In declarator
<non-null bucket>line 1: ERROR -- spec def: 18780a0
line 1: ERROR -- built base
line 1: ERROR -- got id
line 1: ERROR -- Print id: a
line 1: ERROR -- $0 type tag: 6
line 1: ERROR -- found type. tag: 6
line 1: ERROR -- not array or ptr. Tag: 6
line 1: ERROR -- found size
line 1: ERROR -- found alignment
line 1: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 37
Reducing stack by rule 199 (line 481):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 2: ERROR -- id node: b
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 2: ERROR -- In declarator
<non-null bucket>line 2: ERROR -- spec def: 1879200
line 2: ERROR -- built base
line 2: ERROR -- got id
line 2: ERROR -- Print id: b
line 2: ERROR -- $0 type tag: 6
line 2: ERROR -- found type. tag: 6
line 2: ERROR -- not array or ptr. Tag: 6
line 2: ERROR -- found size
line 2: ERROR -- found alignment
line 2: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 3: ERROR -- id node: c
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 134
Reducing stack by rule 141 (line 355):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 3: ERROR -- In declarator
<non-null bucket>line 3: ERROR -- spec def: 1879280
line 3: ERROR -- built base
line 3: ERROR -- got id
line 3: ERROR -- Print id: c
line 3: ERROR -- $0 type tag: 2
line 3: ERROR -- found type. tag: 2
line 3: ERROR -- not array or ptr. Tag: 2
line 3: ERROR -- found size
line 3: ERROR -- found alignment
line 3: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 4: ERROR -- id node: d
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58
Entering state 135
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 34 58 135
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 4: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 34 58 135
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 34 58 135
Entering state 227
Reducing stack by rule 148 (line 374):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 36 26 34 58
Entering state 138
Reducing stack by rule 146 (line 369):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 36 26 34 58
Entering state 137
Next token is token ')' ()
Reducing stack by rule 144 (line 364):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 36 26 34 58
Entering state 136
Next token is token ')' ()
Shifting token ')' ()
Entering state 231
Reducing stack by rule 140 (line 354):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 4: ERROR -- In declarator
<non-null bucket>line 4: ERROR -- spec def: 1879300
line 4: ERROR -- built base
line 4: ERROR -- got id
line 4: ERROR -- Print id: d
line 4: ERROR -- $0 type tag: 6
line 4: ERROR -- found type. tag: 6
line 4: ERROR -- not array or ptr. Tag: 6
line 4: ERROR -- found size
line 4: ERROR -- found alignment
line 4: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 5: ERROR -- id node: e
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token UNSIGNED ()
Shifting token UNSIGNED ()
Entering state 13
Reducing stack by rule 104 (line 269):
   $1 = token UNSIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58
Entering state 28
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 8
Reducing stack by rule 97 (line 261):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58 28
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58 28
Entering state 52
Reducing stack by rule 84 (line 207):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58
Entering state 135
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 34 58 135
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 5: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 34 58 135
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 34 58 135
Entering state 227
Reducing stack by rule 148 (line 374):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 36 26 34 58
Entering state 138
Reducing stack by rule 146 (line 369):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 36 26 34 58
Entering state 137
Next token is token ')' ()
Reducing stack by rule 144 (line 364):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 36 26 34 58
Entering state 136
Next token is token ')' ()
Shifting token ')' ()
Entering state 231
Reducing stack by rule 140 (line 354):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 5: ERROR -- In declarator
<non-null bucket>line 5: ERROR -- spec def: 18793c0
line 5: ERROR -- built base
line 5: ERROR -- got id
line 5: ERROR -- Print id: e
line 5: ERROR -- $0 type tag: 1
line 5: ERROR -- found type. tag: 1
line 5: ERROR -- not array or ptr. Tag: 1
line 5: ERROR -- found size
line 5: ERROR -- found alignment
line 5: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 9
Reducing stack by rule 98 (line 262):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 6: ERROR -- id node: f
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58
Entering state 135
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 34 58 135
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 6: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 34 58 135
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 34 58 135
Entering state 227
Reducing stack by rule 148 (line 374):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 36 26 34 58
Entering state 138
Reducing stack by rule 146 (line 369):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 36 26 34 58
Entering state 137
Next token is token ')' ()
Reducing stack by rule 144 (line 364):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 36 26 34 58
Entering state 136
Next token is token ')' ()
Shifting token ')' ()
Entering state 231
Reducing stack by rule 140 (line 354):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 6: ERROR -- In declarator
<non-null bucket>line 6: ERROR -- spec def: 1879480
line 6: ERROR -- built base
line 6: ERROR -- got id
line 6: ERROR -- Print id: f
line 6: ERROR -- $0 type tag: 5
line 6: ERROR -- found type. tag: 5
line 6: ERROR -- not array or ptr. Tag: 5
line 6: ERROR -- found size
line 6: ERROR -- found alignment
line 6: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: g
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Reading a token: Next token is token LONG ()
Shifting token LONG ()
Entering state 11
Reducing stack by rule 100 (line 264):
   $1 = token LONG ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58
Entering state 135
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 34 58 135
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: a
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 34 58 135
Entering state 34
Reading a token: Next token is token ',' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 34 58 135
Entering state 227
Reducing stack by rule 148 (line 374):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 36 26 34 58
Entering state 138
Reducing stack by rule 146 (line 369):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 36 26 34 58
Entering state 137
Next token is token ',' ()
Shifting token ',' ()
Entering state 232
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36 26 34 58 137 232
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36 26 34 58 137 232
Entering state 135
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 34 58 137 232 135
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: b
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 34 58 137 232 135
Entering state 34
Reading a token: Next token is token ')' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 34 58 137 232 135
Entering state 227
Reducing stack by rule 148 (line 374):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 36 26 34 58 137 232
Entering state 297
Reducing stack by rule 147 (line 370):
   $1 = nterm parameter_list ()
   $2 = token ',' ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 36 26 34 58
Entering state 137
Next token is token ')' ()
Reducing stack by rule 144 (line 364):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 36 26 34 58
Entering state 136
Next token is token ')' ()
Shifting token ')' ()
Entering state 231
Reducing stack by rule 140 (line 354):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token ';' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token ';' ()
Reducing stack by rule 89 (line 218):
   $1 = nterm declarator ()
line 7: ERROR -- In declarator
<non-null bucket>line 7: ERROR -- spec def: 1879540
line 7: ERROR -- built base
line 7: ERROR -- got id
line 7: ERROR -- Print id: g
line 7: ERROR -- $0 type tag: 2
line 7: ERROR -- found type. tag: 2
line 7: ERROR -- not array or ptr. Tag: 2
line 7: ERROR -- found size
line 7: ERROR -- found alignment
line 7: ERROR -- backend calls
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token VOID ()
Shifting token VOID ()
Entering state 18
Reducing stack by rule 96 (line 260):
   $1 = token VOID ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
BUG: line 8: illegal specifier in update_bucket
-----Mine:------
line 24: ERROR -- duplicate parameter declaration for `a'
line 25: ERROR -- no id in parameter list
line 26: ERROR -- duplicate declaration for a
line 26: ERROR -- duplicate definition of `a'
================


LEVEL 110:

Running pcc3 with input T1L110_ok.c ... zero termination status
  T1L110_ok.err exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
1,10855d0
< Starting parse
< Entering state 0
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 5: ERROR -- id node: i
< -> $$ = nterm direct_declarator ()
< Stack now 0 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0
< Entering state 37
< Reducing stack by rule 199 (line 481):
<    $1 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token FLOAT ()
< Shifting token FLOAT ()
< Entering state 14
< Reducing stack by rule 101 (line 266):
<    $1 = token FLOAT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 6: ERROR -- id node: x
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 7: ERROR -- id node: d
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token CHAR ()
< Shifting token CHAR ()
< Entering state 8
< Reducing stack by rule 97 (line 261):
<    $1 = token CHAR ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 8: ERROR -- id node: c
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 9: ERROR -- id node: p
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 35
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token '*' ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26
< Entering state 35
< Next token is token '*' ()
< Shifting token '*' ()
< Entering state 24
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 118 (line 301):
< -> $$ = nterm specifier_qualifier_list_opt ()
< Stack now 0 36 26 35 24
< Entering state 45
< Reducing stack by rule 142 (line 359):
<    $1 = token '*' ()
<    $2 = nterm specifier_qualifier_list_opt ()
< -> $$ = nterm pointer ()
< Stack now 0 36 26 35
< Entering state 35
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26 35 35
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 10: ERROR -- id node: pp
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26 35 35
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 35 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26 35
< Entering state 60
< Reducing stack by rule 135 (line 339):
<    $1 = nterm pointer ()
<    $2 = nterm declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72
< Entering state 104
< Reading a token: Next token is token ';' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72
< Entering state 105
< Next token is token ';' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72
< Entering state 108
< Next token is token ';' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72
< Entering state 109
< Next token is token ';' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72
< Entering state 110
< Next token is token ';' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72
< Entering state 111
< Next token is token ';' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72
< Entering state 112
< Next token is token ';' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72
< Entering state 113
< Next token is token ';' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 114
< Next token is token ';' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 115
< Next token is token ';' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72
< Entering state 116
< Next token is token ';' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72
< Entering state 117
< Next token is token ';' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 14: ERROR -- id node: ai
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 14: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token FLOAT ()
< Shifting token FLOAT ()
< Entering state 14
< Reducing stack by rule 101 (line 266):
<    $1 = token FLOAT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 16: ERROR -- id node: ax
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 16: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token DOUBLE ()
< Shifting token DOUBLE ()
< Entering state 15
< Reducing stack by rule 102 (line 267):
<    $1 = token DOUBLE ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 18: ERROR -- id node: ad
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 18: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token DOUBLE_CONSTANT ()
< Shifting token DOUBLE_CONSTANT ()
< Entering state 80
< Reducing stack by rule 3 (line 64):
<    $1 = token DOUBLE_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 22: ERROR -- id node: icai
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 22: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 26: ERROR -- id node: mdai
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 26: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 26: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 28: ERROR -- id node: mdai2
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 28: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 28: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 168 (line 409):
<    $1 = token ',' ()
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 30: ERROR -- id node: mdai3
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 30: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 30: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 168 (line 409):
<    $1 = token ',' ()
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Next token is token INT ()
< Shifting token INT ()
< Entering state 10
< Reducing stack by rule 99 (line 263):
<    $1 = token INT ()
< -> $$ = nterm type_specifier ()
< Stack now 0 36
< Entering state 28
< Reading a token: Next token is token IDENTIFIER ()
< Reducing stack by rule 83 (line 206):
<    $1 = nterm type_specifier ()
< -> $$ = nterm declaration_specifiers ()
< Stack now 0 36
< Entering state 26
< Next token is token IDENTIFIER ()
< Shifting token IDENTIFIER ()
< Entering state 1
< Reducing stack by rule 205 (line 500):
<    $1 = token IDENTIFIER ()
< -> $$ = nterm identifier ()
< Stack now 0 36 26
< Entering state 39
< Reducing stack by rule 136 (line 343):
<    $1 = nterm identifier ()
< line 32: ERROR -- id node: mdai4
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 32: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 32: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 32: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '[' ()
< Shifting token '[' ()
< Entering state 59
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 34 59
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 34 59
< Entering state 104
< Reading a token: Next token is token ']' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 34 59
< Entering state 140
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 34 59
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 34 59
< Entering state 108
< Next token is token ']' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 34 59
< Entering state 109
< Next token is token ']' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 34 59
< Entering state 110
< Next token is token ']' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 34 59
< Entering state 111
< Next token is token ']' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 34 59
< Entering state 112
< Next token is token ']' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 34 59
< Entering state 113
< Next token is token ']' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 114
< Next token is token ']' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 115
< Next token is token ']' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 34 59
< Entering state 116
< Next token is token ']' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 34 59
< Entering state 117
< Next token is token ']' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 34 59
< Entering state 141
< Reducing stack by rule 76 (line 186):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm constant_expr ()
< Stack now 0 36 26 34 59
< Entering state 142
< Next token is token ']' ()
< Shifting token ']' ()
< Entering state 233
< Reducing stack by rule 139 (line 349):
<    $1 = nterm direct_declarator ()
<    $2 = token '[' ()
<    $3 = nterm constant_expr ()
<    $4 = token ']' ()
< line 32: ERROR -- Array found
< -> $$ = nterm direct_declarator ()
< Stack now 0 36 26
< Entering state 34
< Reading a token: Next token is token '=' ()
< Reducing stack by rule 134 (line 338):
<    $1 = nterm direct_declarator ()
< -> $$ = nterm declarator ()
< Stack now 0 36 26
< Entering state 50
< Next token is token '=' ()
< Shifting token '=' ()
< Entering state 72
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238 298 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '{' ()
< Shifting token '{' ()
< Entering state 150
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 104
< Reading a token: Next token is token ',' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 105
< Next token is token ',' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 108
< Next token is token ',' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 109
< Next token is token ',' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 110
< Next token is token ',' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 111
< Next token is token ',' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 112
< Next token is token ',' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 113
< Next token is token ',' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 114
< Next token is token ',' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 115
< Next token is token ',' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 116
< Next token is token ',' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 117
< Next token is token ',' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 238
< Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token INT_CONSTANT ()
< Shifting token INT_CONSTANT ()
< Entering state 79
< Reducing stack by rule 2 (line 63):
<    $1 = token INT_CONSTANT ()
< -> $$ = nterm primary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 103
< Reducing stack by rule 6 (line 70):
<    $1 = nterm primary_expr ()
< -> $$ = nterm postfix_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 104
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 17 (line 90):
<    $1 = nterm postfix_expr ()
< -> $$ = nterm unary_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 105
< Next token is token '}' ()
< Reducing stack by rule 29 (line 103):
<    $1 = nterm unary_expr ()
< -> $$ = nterm cast_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 107
< Reducing stack by rule 31 (line 108):
<    $1 = nterm cast_expr ()
< -> $$ = nterm multiplicative_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 108
< Next token is token '}' ()
< Reducing stack by rule 35 (line 115):
<    $1 = nterm multiplicative_expr ()
< -> $$ = nterm additive_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 109
< Next token is token '}' ()
< Reducing stack by rule 38 (line 121):
<    $1 = nterm additive_expr ()
< -> $$ = nterm shift_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 110
< Next token is token '}' ()
< Reducing stack by rule 41 (line 127):
<    $1 = nterm shift_expr ()
< -> $$ = nterm relational_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 111
< Next token is token '}' ()
< Reducing stack by rule 46 (line 135):
<    $1 = nterm relational_expr ()
< -> $$ = nterm equality_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 112
< Next token is token '}' ()
< Reducing stack by rule 49 (line 141):
<    $1 = nterm equality_expr ()
< -> $$ = nterm and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 113
< Next token is token '}' ()
< Reducing stack by rule 51 (line 146):
<    $1 = nterm and_expr ()
< -> $$ = nterm exclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 114
< Next token is token '}' ()
< Reducing stack by rule 53 (line 151):
<    $1 = nterm exclusive_or_expr ()
< -> $$ = nterm inclusive_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 115
< Next token is token '}' ()
< Reducing stack by rule 55 (line 156):
<    $1 = nterm inclusive_or_expr ()
< -> $$ = nterm logical_and_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 116
< Next token is token '}' ()
< Reducing stack by rule 57 (line 161):
<    $1 = nterm logical_and_expr ()
< -> $$ = nterm logical_or_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 117
< Next token is token '}' ()
< Reducing stack by rule 59 (line 166):
<    $1 = nterm logical_or_expr ()
< -> $$ = nterm conditional_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 118
< Reducing stack by rule 61 (line 171):
<    $1 = nterm conditional_expr ()
< -> $$ = nterm assignment_expr ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 151
< Reducing stack by rule 165 (line 403):
<    $1 = nterm assignment_expr ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150
< Entering state 238
< Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150 238 298 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238 298 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150 150 238 298
< Entering state 321
< Reducing stack by rule 170 (line 414):
<    $1 = nterm initializer_list ()
<    $2 = token ',' ()
<    $3 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150 150
< Entering state 238
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 167 (line 407):
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72 150
< Entering state 237
< Reducing stack by rule 169 (line 413):
<    $1 = nterm initializer ()
< -> $$ = nterm initializer_list ()
< Stack now 0 36 26 50 72 150
< Entering state 238
< Reading a token: Next token is token ',' ()
< Shifting token ',' ()
< Entering state 298
< Reading a token: Next token is token '}' ()
< Reducing stack by rule 168 (line 409):
<    $1 = token ',' ()
< -> $$ = nterm comma_opt ()
< Stack now 0 36 26 50 72 150 238
< Entering state 299
< Next token is token '}' ()
< Shifting token '}' ()
< Entering state 322
< Reducing stack by rule 166 (line 404):
<    $1 = token '{' ()
<    $2 = nterm initializer_list ()
<    $3 = nterm comma_opt ()
<    $4 = token '}' ()
< -> $$ = nterm initializer ()
< Stack now 0 36 26 50 72
< Entering state 152
< Reducing stack by rule 90 (line 252):
<    $1 = nterm declarator ()
<    $2 = token '=' ()
<    $3 = nterm initializer ()
< -> $$ = nterm init_declarator ()
< Stack now 0 36 26
< Entering state 49
< Reducing stack by rule 87 (line 213):
<    $1 = nterm init_declarator ()
< -> $$ = nterm init_declarator_list ()
< Stack now 0 36 26
< Entering state 48
< Reading a token: Next token is token ';' ()
< Shifting token ';' ()
< Entering state 71
< Reducing stack by rule 80 (line 200):
<    $1 = nterm declaration_specifiers ()
<    $2 = nterm init_declarator_list ()
<    $3 = token ';' ()
< -> $$ = nterm declaration ()
< Stack now 0 36
< Entering state 25
< Reducing stack by rule 202 (line 487):
<    $1 = nterm declaration ()
< -> $$ = nterm external_declaration ()
< Stack now 0 36
< Entering state 62
< Reducing stack by rule 200 (line 482):
<    $1 = nterm translation_unit ()
<    $2 = nterm external_declaration ()
< -> $$ = nterm translation_unit ()
< Stack now 0
< Entering state 36
< Reading a token: Now at end of input.
< Shifting token $end ()
< Entering state 61
< Stack now 0 36 61
< Cleanup: popping token $end ()
< Cleanup: popping nterm translation_unit ()
10859a5,12
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = signed char
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10862a16,23
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10865a27,34
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10868a38,45
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10871a49,56
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10874a60,67
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 10 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10877a71,78
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = <no qual> pointer to <no qual> pointer to signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10880a82,89
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 4 double
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10883a93,100
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 10 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10886a104,111
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 5 float
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10889a115,122
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 3 array of 5 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10892a126,133
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 3 array of 5 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10895a137,144
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 3 array of 5 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
> 
10897a147,154
> 
>         Dump: VAR Stack. 
>             Dump: block num =0
> 	GDECL
> 		type = array of 2 array of 4 array of 3 array of 5 signed int
> 		storage class = <no storage class>
> 		reference parameter = FALSE
> 		error = FALSE
^^^^^
  T1L110_ok.s exists
  Comparing with solution file ... FILES DIFFER:
vvvvv
4a5,12
> 				# b_global_decl (i, alignment = 4, size = 4)
> .globl i
> 	.data
> 	.align	4
> 	.type	i, @object
> 	.size	i, 4
> i:
> 	.long	19
5a14,20
> 				# b_global_decl (x, alignment = 4, size = 4)
> .globl x
> 	.align	4
> 	.type	x, @object
> 	.size	x, 4
> x:
> 	.long	1100580127
6a22,29
> 				# b_global_decl (d, alignment = 8, size = 8)
> .globl d
> 	.align	8
> 	.type	d, @object
> 	.size	d, 8
> d:
> 	.long	-1889785610
> 	.long	1077228994
7a31,37
> 				# b_global_decl (c, alignment = 1, size = 1)
> .globl c
> 	.align	1
> 	.type	c, @object
> 	.size	c, 1
> c:
> 	.byte	0
8a39,45
> 				# b_global_decl (p, alignment = 4, size = 4)
> .globl p
> 	.align	4
> 	.type	p, @object
> 	.size	p, 4
> p:
> 	.long	0
9a47,53
> 				# b_global_decl (pp, alignment = 4, size = 4)
> .globl pp
> 	.align	4
> 	.type	pp, @object
> 	.size	pp, 4
> pp:
> 	.long	0
13a58,73
> 				# b_global_decl (ai, alignment = 4, size = 40)
> .globl ai
> 	.align	4
> 	.type	ai, @object
> 	.size	ai, 40
> ai:
> 	.long	0
> 	.long	1
> 	.long	2
> 	.long	3
> 	.long	4
> 	.long	5
> 	.long	6
> 	.long	7
> 	.long	8
> 	.long	9
15a76,86
> 				# b_global_decl (ax, alignment = 4, size = 20)
> .globl ax
> 	.align	4
> 	.type	ax, @object
> 	.size	ax, 20
> ax:
> 	.long	1066192077
> 	.long	1067030938
> 	.long	1075000115
> 	.long	1068708659
> 	.long	1069547520
17a89,102
> 				# b_global_decl (ad, alignment = 8, size = 32)
> .globl ad
> 	.align	8
> 	.type	ad, @object
> 	.size	ad, 32
> ad:
> 	.long	1717986918
> 	.long	1074423398
> 	.long	-1717986918
> 	.long	1074895257
> 	.long	0
> 	.long	1075183616
> 	.long	1717986918
> 	.long	1075471974
21a107,118
> 				# b_global_decl (icai, alignment = 4, size = 40)
> .globl icai
> 	.align	4
> 	.type	icai, @object
> 	.size	icai, 40
> icai:
> 	.long	5
> 	.long	5
> 	.long	5
> 	.long	5
> 	.long	5
> 	.zero	20
25a123,143
> 				# b_global_decl (mdai, alignment = 4, size = 60)
> .globl mdai
> 	.align	4
> 	.type	mdai, @object
> 	.size	mdai, 60
> mdai:
> 	.long	0
> 	.long	1
> 	.long	2
> 	.long	3
> 	.long	4
> 	.long	6
> 	.long	7
> 	.long	8
> 	.long	9
> 	.long	10
> 	.long	11
> 	.long	12
> 	.long	13
> 	.long	14
> 	.long	15
27a146,165
> 				# b_global_decl (mdai2, alignment = 4, size = 60)
> .globl mdai2
> 	.align	4
> 	.type	mdai2, @object
> 	.size	mdai2, 60
> mdai2:
> 	.long	0
> 	.long	1
> 	.long	2
> 	.zero	8
> 	.long	6
> 	.long	7
> 	.long	8
> 	.long	9
> 	.long	10
> 	.long	12
> 	.long	13
> 	.long	14
> 	.long	15
> 	.zero	4
29a168,181
> 				# b_global_decl (mdai3, alignment = 4, size = 60)
> .globl mdai3
> 	.align	4
> 	.type	mdai3, @object
> 	.size	mdai3, 60
> mdai3:
> 	.long	0
> 	.long	1
> 	.zero	12
> 	.long	5
> 	.long	6
> 	.long	7
> 	.zero	8
> 	.zero	20
31a184,208
> 				# b_global_decl (mdai4, alignment = 4, size = 480)
> .globl mdai4
> 	.align	4
> 	.type	mdai4, @object
> 	.size	mdai4, 480
> mdai4:
> 	.long	1
> 	.long	2
> 	.long	3
> 	.zero	8
> 	.long	4
> 	.long	5
> 	.zero	12
> 	.zero	20
> 	.long	6
> 	.zero	16
> 	.zero	40
> 	.long	7
> 	.zero	16
> 	.long	8
> 	.long	9
> 	.zero	12
> 	.zero	20
> 	.zero	60
> 	.zero	240
^^^^^
Running pcc3 with input T1L110_err.c ... zero termination status
  T1L110_err.err exists
  Comparing with solution file ... Comparing error messages:
-----Yours:-----
Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 4: ERROR -- id node: i
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 37
Reducing stack by rule 199 (line 481):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 5: ERROR -- id node: x
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 6: ERROR -- id node: d
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 8
Reducing stack by rule 97 (line 261):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 7: ERROR -- id node: c
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '*' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 8: ERROR -- id node: p
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 35
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token '*' ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token '*' ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26
Entering state 35
Next token is token '*' ()
Shifting token '*' ()
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 118 (line 301):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 36 26 35 24
Entering state 45
Reducing stack by rule 142 (line 359):
   $1 = token '*' ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 36 26 35
Entering state 35
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26 35 35
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 9: ERROR -- id node: pp
-> $$ = nterm direct_declarator ()
Stack now 0 36 26 35 35
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 35 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26 35
Entering state 60
Reducing stack by rule 135 (line 339):
   $1 = nterm pointer ()
   $2 = nterm declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 13: ERROR -- id node: ai
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 13: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 14
Reducing stack by rule 101 (line 266):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 15: ERROR -- id node: ax
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 15: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 15
Reducing stack by rule 102 (line 267):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 17: ERROR -- id node: ad
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 17: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 21: ERROR -- id node: icai
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 21: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 25: ERROR -- id node: mdai
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 25: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 25: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 27: ERROR -- id node: mdai2
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 27: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 27: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '}' ()
Reducing stack by rule 168 (line 409):
   $1 = token ',' ()
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 31: ERROR -- id node: e1
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 31: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 33: ERROR -- id node: e2
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token DOUBLE_CONSTANT ()
Shifting token DOUBLE_CONSTANT ()
Entering state 80
Reducing stack by rule 3 (line 64):
   $1 = token DOUBLE_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72
Entering state 104
Reading a token: Next token is token ';' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72
Entering state 105
Next token is token ';' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72
Entering state 108
Next token is token ';' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72
Entering state 109
Next token is token ';' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72
Entering state 110
Next token is token ';' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72
Entering state 111
Next token is token ';' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72
Entering state 112
Next token is token ';' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72
Entering state 113
Next token is token ';' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 114
Next token is token ';' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72
Entering state 115
Next token is token ';' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72
Entering state 116
Next token is token ';' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72
Entering state 117
Next token is token ';' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 35: ERROR -- id node: e3
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 37: ERROR -- id node: e4
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 37: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 37: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 10
Reducing stack by rule 99 (line 263):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 36
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 83 (line 206):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 36
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 205 (line 500):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 36 26
Entering state 39
Reducing stack by rule 136 (line 343):
   $1 = nterm identifier ()
line 39: ERROR -- id node: e5
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 39: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 59
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 34 59
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 34 59
Entering state 104
Reading a token: Next token is token ']' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 34 59
Entering state 140
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 34 59
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 34 59
Entering state 108
Next token is token ']' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 34 59
Entering state 109
Next token is token ']' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 34 59
Entering state 110
Next token is token ']' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 34 59
Entering state 111
Next token is token ']' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 34 59
Entering state 112
Next token is token ']' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 34 59
Entering state 113
Next token is token ']' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 114
Next token is token ']' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 34 59
Entering state 115
Next token is token ']' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 34 59
Entering state 116
Next token is token ']' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 34 59
Entering state 117
Next token is token ']' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 34 59
Entering state 141
Reducing stack by rule 76 (line 186):
   $1 = nterm conditional_expr ()
-> $$ = nterm constant_expr ()
Stack now 0 36 26 34 59
Entering state 142
Next token is token ']' ()
Shifting token ']' ()
Entering state 233
Reducing stack by rule 139 (line 349):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm constant_expr ()
   $4 = token ']' ()
line 39: ERROR -- Array found
-> $$ = nterm direct_declarator ()
Stack now 0 36 26
Entering state 34
Reading a token: Next token is token '=' ()
Reducing stack by rule 134 (line 338):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 36 26
Entering state 50
Next token is token '=' ()
Shifting token '=' ()
Entering state 72
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 104
Reading a token: Next token is token ',' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 105
Next token is token ',' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 108
Next token is token ',' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 109
Next token is token ',' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 110
Next token is token ',' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 111
Next token is token ',' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 112
Next token is token ',' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 113
Next token is token ',' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 114
Next token is token ',' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 115
Next token is token ',' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 116
Next token is token ',' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 117
Next token is token ',' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 237
Reducing stack by rule 169 (line 413):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token ',' ()
Shifting token ',' ()
Entering state 298
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 79
Reducing stack by rule 2 (line 63):
   $1 = token INT_CONSTANT ()
-> $$ = nterm primary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 103
Reducing stack by rule 6 (line 70):
   $1 = nterm primary_expr ()
-> $$ = nterm postfix_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 104
Reading a token: Next token is token '}' ()
Reducing stack by rule 17 (line 90):
   $1 = nterm postfix_expr ()
-> $$ = nterm unary_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 105
Next token is token '}' ()
Reducing stack by rule 29 (line 103):
   $1 = nterm unary_expr ()
-> $$ = nterm cast_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 107
Reducing stack by rule 31 (line 108):
   $1 = nterm cast_expr ()
-> $$ = nterm multiplicative_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 108
Next token is token '}' ()
Reducing stack by rule 35 (line 115):
   $1 = nterm multiplicative_expr ()
-> $$ = nterm additive_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 109
Next token is token '}' ()
Reducing stack by rule 38 (line 121):
   $1 = nterm additive_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 110
Next token is token '}' ()
Reducing stack by rule 41 (line 127):
   $1 = nterm shift_expr ()
-> $$ = nterm relational_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 111
Next token is token '}' ()
Reducing stack by rule 46 (line 135):
   $1 = nterm relational_expr ()
-> $$ = nterm equality_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 112
Next token is token '}' ()
Reducing stack by rule 49 (line 141):
   $1 = nterm equality_expr ()
-> $$ = nterm and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 113
Next token is token '}' ()
Reducing stack by rule 51 (line 146):
   $1 = nterm and_expr ()
-> $$ = nterm exclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 114
Next token is token '}' ()
Reducing stack by rule 53 (line 151):
   $1 = nterm exclusive_or_expr ()
-> $$ = nterm inclusive_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 115
Next token is token '}' ()
Reducing stack by rule 55 (line 156):
   $1 = nterm inclusive_or_expr ()
-> $$ = nterm logical_and_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 116
Next token is token '}' ()
Reducing stack by rule 57 (line 161):
   $1 = nterm logical_and_expr ()
-> $$ = nterm logical_or_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 117
Next token is token '}' ()
Reducing stack by rule 59 (line 166):
   $1 = nterm logical_or_expr ()
-> $$ = nterm conditional_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 118
Reducing stack by rule 61 (line 171):
   $1 = nterm conditional_expr ()
-> $$ = nterm assignment_expr ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 151
Reducing stack by rule 165 (line 403):
   $1 = nterm assignment_expr ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150 238 298 150
Entering state 238
Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238 298 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72 150 238 298
Entering state 321
Reducing stack by rule 170 (line 414):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 36 26 50 72 150
Entering state 238
Reading a token: Next token is token '}' ()
Reducing stack by rule 167 (line 407):
-> $$ = nterm comma_opt ()
Stack now 0 36 26 50 72 150 238
Entering state 299
Next token is token '}' ()
Shifting token '}' ()
Entering state 322
Reducing stack by rule 166 (line 404):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = nterm comma_opt ()
   $4 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 36 26 50 72
Entering state 152
Reducing stack by rule 90 (line 252):
   $1 = nterm declarator ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 36 26
Entering state 49
Reducing stack by rule 87 (line 213):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 36 26
Entering state 48
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 71
Reducing stack by rule 80 (line 200):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 36
Entering state 25
Reducing stack by rule 202 (line 487):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 36
Entering state 62
Reducing stack by rule 200 (line 482):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 36
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 61
Stack now 0 36 61
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()
-----Mine:------
line 31: ERROR -- too many items in initializer
line 33: ERROR -- type mismatch in initializer
line 35: ERROR -- initializer list for non-array type
line 37: ERROR -- too many items in initializer
line 39: ERROR -- too many items in initializer
================
######################################################
Summary for self-test:
  T1L80_err:  error message(s) (will check appropriateness by hand)
  T1L80_ok:  2 PROBLEM(S) FOUND
  T1L90_ok:  2 PROBLEM(S) FOUND
  T1L90_err:  error message(s) (will check appropriateness by hand)
  T1L100_ok:  2 PROBLEM(S) FOUND
  T1L100_err:  error message(s) (will check appropriateness by hand)
  T1L110_err:  error message(s) (will check appropriateness by hand)
  T1L110_ok:  2 PROBLEM(S) FOUND
  pcc3:  ok
######################################################
 80% level: (supplied by hand)
 90% level: (supplied by hand)
100% level: (supplied by hand)
